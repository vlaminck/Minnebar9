/**
 *  Title: Phrase Shortcut
 * 	Description:
 *
 *  Author: steve
 *  Date: 4/9/14
 */

// ========================================================
// URL Mappings
// ========================================================

	mappings {
		path("/getHTML/:phraseName") {
			action: [
				GET: "getHTML",
			]
		}
		path("/executePhrase/:phraseName") {
			action: [
				GET: "executePhrase",
			]
		}
	}

// ========================================================
// Pages / Preferences
// ========================================================

	preferences {
		page(name: "firstPage")
	}

	def firstPage() {

		def appIsInstalled = app.installationState == "COMPLETE"

		dynamicPage(name: "firstPage", title: "Hello Home Shortcuts", install: true, uninstall: true) {

			if (appIsInstalled) {

				section("Which phrase would you like to create a shortcut for?") {
					getHelloHomePhrases().each { phrase ->
						href(name: phrase, title: phrase, description: null, url: phraseSetupUrl(phrase), style: "external")
					}
				}

			} else {

				section("Very Important") {
					paragraph "Press done to install the app"
					paragraph "Nothing in this app will work if you don't :)"
				}

			}
		}
	}

// ========================================================
// Hello Home Phrases
// ========================================================


	private getHelloHomePhrases() { // returns a list of strings
		location.helloHome.getPhrases().label
	}

	private executeHelloHomePhrase(phrase) {
		location.helloHome.execute(phrase)
	}

// ========================================================
// URL Builders
// ========================================================

	private phraseSetupUrl(phrase) {
		def encodedPhrase = URLEncoder.encode(phrase)
		return "${serverUrl()}/api/t/${getMyAccessToken()}/s/${app.id}/getHTML/${encodedPhrase}"
	}

	private phraseExecutionUrl(phraseName) {
		def encodedPhrase = URLEncoder.encode(phraseName)
		return "${serverUrl()}/api/t/${getMyAccessToken()}/s/${app.id}/executePhrase/${encodedPhrase}"
	}

	private serverUrl() { "https://graph.api.smartthings.com" }

	private getMyAccessToken() {
/* 	createAccessToken() will generate a token and place it in state.accessToken
*		You must have enabled OAuth from the App Settings screen before createAccessToken() will work. Likewise, you must have OAuth enabled to use the token
* 	atomicState is your state object but atomic. If you need to place something in state and read it out immediately, use atomicState */
		return atomicState.accessToken ?: createAccessToken()
	}

// ========================================================
// REST / HTML
// ========================================================


	def executePhrase() {

		def phrase = params.phraseName

		if (getHelloHomePhrases().contains(phrase)) {
			log.debug "about to execute phrase: ${phrase}"

			executeHelloHomePhrase(phrase)
			render status: 200, contentType: 'text/html', data: successHTML(phrase)

		} else {
			httpError(404, "Phrase not found")
		}
	}

	def getHTML() {
		def html = """
	<!DOCTYPE html>
<head>
	<meta charset="utf-8">
	<title>Follow The Link</title>

	<meta name="viewport" content="target-densitydpi=device-dpi, width=device-width, user-scalable=no, maximum-scale=1, minimum-scale=1" />

	<link rel="apple-touch-icon" href="http://f.cl.ly/items/3N0B3j0B0n0V052W3a0a/android-app-icon-1.png">

	<meta name="apple-mobile-web-app-capable" content="yes">
	<meta name="apple-mobile-web-app-status-bar-style" content="black">
</head>
<body>
	<ol>
		<li>Follow the link below</li>
			<ul>
				<li>Your phrase will execute</li>
				<li>The SmartThings app will open</li>
			</ul>
		<li>Reopen Mobile Safari</li>
	</ol>
	<div>
		<a href="${phraseExecutionUrl(params.phraseName)}">Follow this link then reopen Safari</a>
	</div>
</body>
	"""

		render status: 200, contentType: 'text/html', data: html
	}


	def successHTML(phrase) {

/* 	the iOS app will respond to smartthings://smartapp/${app.id}
 * 	however, it will not open the specified SmartApp
 * 	smartthings:// will log the user out so don't do that */

		def openSmartThings = "smartthings://smartapp/${app.id}"

		return """
<!DOCTYPE html>
<head>
	<meta charset="utf-8">
	<title>${phrase}</title>

	<meta name="viewport" content="target-densitydpi=device-dpi, width=device-width, user-scalable=no, maximum-scale=1, minimum-scale=1" />

	<link rel="apple-touch-icon" href="http://f.cl.ly/items/3N0B3j0B0n0V052W3a0a/android-app-icon-1.png">

	<meta name="apple-mobile-web-app-capable" content="yes">
	<meta name="apple-mobile-web-app-status-bar-style" content="black">

</head>
<body>

	<h1>1.<img src="http://f.cl.ly/items/302e2j1V2g1c020T1J30/share_button.png"></h1>
	<h1>2.<img src="http://f.cl.ly/items/3W2v0y3G0b1M2q2R3g0I/Screen%20Shot%202014-04-11%20at%2010.59.39%20AM.png"></h1>

	<script>
		window.onload=function(){
			window.location = "${smartThings}"
		};
	</script>
</body>
	"""
	}

// ========================================================
// Handlers / Unused
// ========================================================


	def installed() {
		log.debug "Installed with settings: ${settings}"

		initialize()
	}

	def updated() {
		log.debug "Updated with settings: ${settings}"

		unsubscribe()
		initialize()
	}

	def initialize() {
		// TODO: subscribe to attributes, devices, locations, etc.
	}

// TODO: implement event handlers
